#!/bin/python3
# def bfs(n, m, edges, s):
import math
import os
import random
import re
import sys
from collections import defaultdict
class Graph:
    def __init__(self,val):
        self.graph = defaultdict(list)
        self.v=val
        self.count=[0]*(self.v+1)
    def addEdge(self,u,v):
        #Directed Graph from u---->v 
        self.graph[u].append(v)
        #Undirected Graph from u<---->v 
        self.graph[v].append(u)
    def recDfs(self,s,visit,c):
        visit[s]=True
        if self.count[s]==0:
            self.count[s]=c
        elif c<self.count[s]:
            self.count[s]=c
        for i in self.graph[s]:
            if visit[i]==False:
                print(s,i)
                self.recDfs(i,visit,c+6)
                print(self.count)

    def dfs(self,s):
        visit=[False]*2*self.v
        l=[]
        visit[s]=True
        for i in self.graph[s]:
                if visit[i]==False:
                    self.recDfs(i,visit,6)
        for i in range(1,self.v+1):
            if self.count[i]==0 and i!=s:
                l.append(-1)
            elif self.count[i]!=0 and i!=s:
                l.append(self.count[i])
        return l

        
            
def bfs(n, m, edges, s):
    g=Graph(n)
    for i in edges:
        g.addEdge(i[0],i[1])
    return g.dfs(s)

if __name__ == '__main__':

    q = int(input())

    for q_itr in range(q):
        nm = input().split()

        n = int(nm[0])

        m = int(nm[1])

        edges = []

        for _ in range(m):
            edges.append(list(map(int, input().rstrip().split())))

        s = int(input())

        print(bfs(n, m, edges, s))

    

'''
1
50 392
1 44
1 28
1 42
1 45
1 23
1 24
1 23
1 42
1 19
1 27
1 12
1 22
1 27
1 48
1 41
1 46
1 11
1 38
1 8
1 11
1 9
1 9
1 23
1 13
1 25
1 49
1 24
1 20
1 27
1 29
1 15
1 20
1 17
1 35
1 24
1 45
1 43
1 35
1 15
1 22
1 50
1 2
1 7
1 22
1 34
1 2
1 27
1 32
1 40
1 13
1 47
1 40
1 28
1 43
1 24
1 5
1 9
1 22
1 39
1 39
1 25
1 21
1 3
1 18
1 25
1 39
1 17
1 37
1 38
1 28
1 35
1 10
1 11
1 2
1 38
1 13
1 18
1 8
1 47
1 45
1 18
1 34
1 19
1 27
1 7
1 2
1 30
1 25
1 39
1 49
1 34
1 44
1 21
1 18
1 47
1 27
1 32
1 24
1 29
1 6
1 40
1 44
1 48
1 48
1 34
1 13
1 27
1 19
1 22
1 48
1 45
1 41
1 28
1 19
1 38
1 3
1 23
1 46
1 14
1 3
1 24
1 17
1 41
1 44
1 19
1 19
1 34
1 11
1 27
1 18
1 29
1 33
1 41
1 2
1 40
1 46
1 36
1 36
1 2
1 16
1 3
1 27
1 13
1 38
1 7
1 32
1 48
1 47
1 16
1 31
1 26
1 42
1 23
1 38
1 43
1 2
1 12
1 26
1 29
1 24
1 34
1 28
1 2
1 15
1 36
1 48
1 36
1 32
1 38
1 13
1 32
1 19
1 27
1 6
1 29
1 38
1 29
1 9
1 5
1 46
1 3
1 38
1 6
1 30
1 14
1 4
1 35
1 46
1 19
1 38
1 12
1 11
1 33
1 8
1 42
1 14
1 22
1 36
1 36
1 18
1 31
1 20
1 24
1 36
1 37
1 20
1 2
1 27
1 40
1 5
1 30
1 2
1 40
1 11
1 46
1 15
1 43
1 36
1 5
1 18
1 37
1 29
1 6
1 36
1 34
1 39
1 27
1 2
1 3
1 18
1 28
1 4
1 22
1 15
1 9
1 31
1 48
1 42
1 33
1 44
1 26
1 49
1 37
1 49
1 37
1 50
1 3
1 33
1 46
1 49
1 22
1 22
1 6
1 35
1 14
1 16
1 17
1 33
1 42
1 36
1 36
1 28
1 26
1 16
1 2
1 23
1 41
1 3
1 45
1 28
1 3
1 33
1 35
1 2
1 3
1 19
1 4
1 20
1 47
1 16
1 50
1 25
1 18
1 19
1 16
1 30
1 27
1 10
1 15
1 30
1 21
1 46
1 28
1 4
1 41
1 8
1 6
1 25
1 37
1 32
1 15
1 11
1 27
1 24
1 2
1 2
1 37
1 30
1 41
1 30
1 40
1 28
1 24
1 2
1 16
1 46
1 35
1 4
1 15
1 42
1 50
1 25
1 44
1 29
1 50
1 35
1 22
1 2
1 25
1 32
1 28
1 24
1 8
1 17
1 2
1 12
1 17
1 2
1 23
1 13
1 42
1 24
1 13
1 10
1 41
1 2
1 13
1 31
1 23
1 28
1 25
1 13
1 2
1 16
1 17
1 31
1 4
1 46
1 8
1 23
1 15
1 2
1 10
1 31
1 48
1 37
1 14
1 22
1 24
1 33
1 24
1 17
1 33
1 23
1 41
1 17
1 33
1 25
1 41
1 25
1 8
1 46
1 4
1 26
1 18
1 45
1 48
1 35
1 40
1 19
1 36
1 49
22
'''
