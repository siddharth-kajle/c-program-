from collections import defaultdict
class Graph:
    def __init__(self,val):
        self.graph = defaultdict(list)
        self.v=val
        self.count=[0,0]
    def addEdge(self,u,v):
        #Directed Graph from u---->v 
        self.graph[u].append(v)
        #Undirected Graph from u<---->v 
        self.graph[v].append(u)
    def printf(self):
        print("Given keys connected to vertex : ")
        print(self.graph)
    def dfs(self,s,parent,col):
        self.count[col]+=1
        for i  in self.graph[s]:
            if i!=parent:
                 self.dfs(i,s,not col)
                


    def color(self):
        self.dfs(1,0,0)
        print(self.count)
        return (self.count[0]*self.count[1]-(self.v-1))
    




g=Graph(5)
g.addEdge(1,2)
g.addEdge(1,3)
g.addEdge(4,3)
g.addEdge(5,2)
g.printf()
c=g.color()
print(c)
